name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  createrelease:
    name: Create Release
    runs-on: [ubuntu-latest]
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: true
          prerelease: false
      - name: Output Release URL File
        run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
      - name: Save Release URL File for publish
        uses: actions/upload-artifact@v1
        with:
          name: release_url
          path: release_url.txt

  build:
    name: Build packages
    needs: createrelease
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            app: update_m32
            target: macos
            type: cli
            conda_path: $CONDA/bin
            assets: src/m32/*.bin:bin/
            exe_name: update_m32
            mime: application/zip

          - os: ubuntu-latest
            app: update_m32
            target: ubuntu
            type: cli
            conda_path: $CONDA/bin
            assets: src/m32/*.bin:bin/
            exe_name: update_m32
            mime: application/zip

          - os: windows-latest
            app: update_m32
            target: windows
            type: cli
            conda_path: $CONDA/Scripts
            assets: src/m32/*.bin;bin/
            exe_name: update_m32.exe
            mime: application/zip
    steps:
      - name: Checkout code
        uses: actions/checkout@v1

      - name: Setup conda
        uses: conda-incubator/setup-miniconda@v3

      - name: Create environment
        shell: bash -l {0}
        run: |
          conda env update --file environment.yml

      - name: Activate environment
        shell: bash -l {0}
        run: |
          conda activate update-m32

      - name: Lint with flake8
        shell: bash -l {0}
        run: |
          conda install flake8
          # stop the build if there are Python syntax errors or undefined names
          flake8 src --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 src --count --max-complexity=10 --max-line-length=127 --statistics

      # Enable tests when we have some to run :-)
      #- name: Test with pytest
      #  shell: bash -l {0}
      #  run: |
      #    conda install pytest
      #    pytest

      - name: Set environment variable
        shell: bash -l {0}
        run: |
          echo "RELEASE_VERSION=${GITHUB_REF#refs/*/v}" >> $GITHUB_ENV
     
      - name: Build with pyinstaller
        shell: bash -l {0}
        run: |
          pyinstaller --clean -y --onefile --add-data "${{ matrix.assets }}" src/update_m32.py

      - name: Zip build artifacts for macos and ubuntu
        shell: bash -l {0}
        if: matrix.os == 'macos-latest' || matrix.os == 'ubuntu-latest'
        run: |
          mkdir archive
          zip -j ./archive/${{ matrix.target }}-${{ matrix.type }}-${{ matrix.app }}-v${{ env.RELEASE_VERSION }}.zip ./dist/${{ matrix.exe_name }} 

      - name: Zip build artifacts for windows
        shell: powershell
        if: matrix.os == 'windows-latest'
        run: |
          mkdir archive
          Compress-Archive -DestinationPath ./archive/${{ matrix.target }}-${{ matrix.type }}-${{ matrix.app }}-v${{ env.RELEASE_VERSION }}.zip -Path ./dist/${{ matrix.exe_name }}

      - name: Upload artifacts to workspace
        uses: actions/upload-artifact@v1
        with:
          name: artifacts
          path: ${{ github.workspace }}/archive/${{ matrix.target }}-${{ matrix.type }}-${{ matrix.app }}-v${{ env.RELEASE_VERSION }}.zip
      
      - name: Load Release URL File from release job
        uses: actions/download-artifact@v1
        with:
          name: release_url

      - name: Get release file name and upload url
        id: get_release_info
        shell: bash
        run: |
          value=`cat release_url/release_url.txt`
          echo ::set-output name=upload_url::$value

      - name: Upload release artifacts
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/archive/${{ matrix.target }}-${{ matrix.type }}-${{ matrix.app }}-v${{ env.RELEASE_VERSION }}.zip
          asset_name: ${{ matrix.target }}-${{ matrix.type }}-${{ matrix.app }}-v${{ env.RELEASE_VERSION }}.zip
          asset_content_type: ${{ matrix.mime}}     
